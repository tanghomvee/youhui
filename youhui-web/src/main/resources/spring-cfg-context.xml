<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd">


    <context:component-scan base-package="com.homvee" >
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <!--如果系统配置和properties配置中存在相同的key 以系统为主-->
        <property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
        <property name="ignoreResourceNotFound" value="true" />
        <property name="locations">
            <list>
                <value>classpath*:runtime.properties</value>
            </list>
        </property>
    </bean>

    <!-- spring thread pool executor -->
    <!--
    如果此时线程池中的数量小于corePoolSize，即使线程池中的线程都处于空闲状态，也要创建新的线程来处理被添加的任务。
    如果此时线程池中的数量等于 corePoolSize，但是缓冲队列 workQueue未满，那么任务被放入缓冲队列。
    如果此时线程池中的数量大于corePoolSize，缓冲队列workQueue满，并且线程池中的数量小于maxPoolSize，建新的线程来处理被添加的任务。
    如果此时线程池中的数量大于corePoolSize，缓冲队列workQueue满，并且线程池中的数量等于maxPoolSize，那么通过handler所指定的策略来处理此任务。也就是：处理任务的优先级为：核心线程corePoolSize、任务队列workQueue、最大线程 maximumPoolSize，如果三者都满了，使用handler处理被拒绝的任务。
    当线程池中的线程数量大于corePoolSize时，如果某线程空闲时间超过keepAliveTime，线程将被终止。这样，线程池可以动态的调整池中的线程数。
    -->
    <bean id="threadPoolTaskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
        <!-- 线程池维护线程的最少数量 -->
        <property name="corePoolSize" value="${thread.pool.core}" />
        <!-- 允许的空闲时间 -->
        <property name="keepAliveSeconds" value="${thread.pool.alive}" />
        <!-- 线程池维护线程的最大数量 -->
        <property name="maxPoolSize" value="${thread.pool.max}" />
        <!-- 缓存队列 -->
        <property name="queueCapacity" value="${thread.pool.queue}" />
        <!-- 在关闭的时候是否需要等待所有任务完成 -->
        <!--<property name="waitForJobsToCompleteOnShutdown" value="${thread.pool.wait}" />-->
        <!-- 对拒绝task的处理策略 -->
        <property name="rejectedExecutionHandler">
            <bean class="java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy" />
        </property>
    </bean>

    <!-- 支持 @Async 注解 -->
    <task:annotation-driven executor="threadPoolTaskExecutor"/>


    <import resource="classpath*:spring-cfg-jpa.xml"/>
    <!--<import resource="classpath*:spring-cfg-redis.xml"/>
    <import resource="classpath*:spring-cfg-task.xml"/>
    <import resource="classpath*:spring-cfg-mq-consumer.xml"/>
    <import resource="classpath*:spring-cfg-mq-producer.xml"/>-->
</beans>